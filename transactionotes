
        
        
        # contract_instance = w3.eth.contract(address=caller, abi=abi, bytecode=bytecode)
        
        # contract_instance.functions.burn(contract_address, amount_to_burn).call().owner()
        # current_account = w3.eth.accounts[0]
        # if owner == current_account:
        #     # Call Ownable function
        #    contract_instance.functions.burn(contract_address, amount_to_burn).transact()
        
        # contract = w3.eth.contract(address=contract_address, abi=abi)

        # owner = contract.functions.owner().call()
        # print(owner)
        # result = contract.functions.burn(contract_address, amount_to_burn).call()#transact({'from': w3.eth.accounts[0]})
        
        # print(result)
        





# def conn_for_burn(self):
        
#          # Connessione alla blockchain
#         w3 = Web3(Web3.HTTPProvider('https://goerli.infura.io/v3/eba9e534005045928e460351c954cbf8'))
#         amount_to_burn = self.amount
#         caller = "0xFdB5e4A6273Ddf2A1D09a377C9E4eb407b3De2C4"
#         private_key = "7d9c83706a1f7ea15c4e341933c4452f11309d3e006bf6af99bf7f0878031c0b"  # To sign the transaction
#         # Initialize address nonce
#         nonce = w3.eth.get_transaction_count(caller)
#         contract_address = '0x6117A5F053e65Aa9bcbE064cD186Ed9580353bCa'
#         data = open('abi.json')
#         abi = json.load(data)
#         # contract = w3.eth.contract(address=contract_address, abi=abi)
#         data = open('bytecode')
#         bytecodedelcazzo = data.readline()
#         bytecode = bytecodedelcazzo

#         # Create contract instance
#         # contract = w3.eth.contract(abi=abi, bytecode=bytecode)
#         contract_instance = w3.eth.contract(address=caller, abi=abi, bytecode=bytecode)
#         tx_hash = contract_instance.constructor().transact()
#         tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
#         print(tx_receipt.contractAddress)

#         pass
#         # initialize the chain id, we need it to build the transaction for replay protection
#         Chain_id = w3.eth.chain_id

#         # Call your function
#         call_function = contract_instance.functions.burn().buildTransaction({"chainId": Chain_id, "from": caller, "nonce": nonce})

#         # Sign transaction
#         signed_tx = w3.eth.account.sign_transaction(call_function, private_key=private_key)

#         # Send transaction
#         send_tx = w3.eth.send_raw_transaction(signed_tx.rawTransaction)

#         # Wait for transaction receipt
#         tx_receipt = w3.eth.wait_for_transaction_receipt(send_tx)
#         print(tx_receipt) # Optional
#         # Check if current account is the owner of the contract
#         # owner = contract_instance.functions.owner().call()
#         # contract_instance.functions.burn(contract_address, amount_to_burn).call().owner()
#         # current_account = w3.eth.accounts[0]
#         #if owner == current_account:
#             # Call Ownable function
#         #    contract_instance.functions.burn(contract_address, amount_to_burn).transact()
#         # ottieni l'ABI dal contratto
#         # abi = contract.abi
        
#         # Creazione dell'istanza del contratto
#         #contract = w3.eth.contract(address=contract_address, abi=abi)

#         # amount_to_burn = self.amount
#         # # Invocazione della funzione del contratto
#         # owner = contract.functions.owner().call()
#         # print(owner)
#         # result = contract.functions.burn(contract_address, amount_to_burn).call()#transact({'from': w3.eth.accounts[0]})
        
#         # print(result)